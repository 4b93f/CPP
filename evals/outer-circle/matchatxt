0) Simple start

Launch the webserver containing the website.
No errors must be visible.

If this is not the case, the question is false and the evaluation stops.
The application must run as is when you start the webserver.


1) Preliminaries


Subject allows the use of a micro-framework and only this. If
the tool used by the student (if tool there is) isn't in the
suggestion list, check that it's a micro-framework following the
subject definition. As a reminder:

> We will consider that a micro-framework has a router, and
eventually templating, but no ORM, validators or User Accounts
Manager.

If the tool used isn't a micro-framework, defense stops.

If at any time during defense, there is any warning, error or
notice in the web console, click on the "Crash" button at the
top of the scale. An error code from 500 to 599 is also
considered a Crash.

Make sure aswell that the DB is not a NoSQL type of database.
No error tracking library must be present on the repo (Raven, Sentry)
No 500 errors allowed, dont try to hide them.


2) Compatibility


Is the website compatible with Firefox (>= 41) and Chrome (>=
46)?


3) Additional bonus


It's possible here to give reward up to 5 additional bonuses.
The usefullness and relevance is up to the corrector to judge.

As examples here are the bonuses proposed in the subject:

- Import pictures from Facebook and/or Google+.
- Interactive map of the users.
- Etc...


4) User account management


The app must allow a user to register asking at least an email
address, a username, a last name, a first name and a password
that is somehow protected. (An english common word shouldn't be
accepted for example.)

A connected user must be able to fill an extended profile, and
must be able to update his information as well as the one given
during registration, at any time.

When you subscribe, you are emailed a clickable link. If you haven't clicked the link, the account must not be usable.


5) Mobile


Is the website usable on a mobile and on very small resolution?


6) Installation and seeding

Re-do the whole installation of every package with the evaluee.
You must also fill the database with the script he wrote.
Make sure that the database at least contains 500 different profiles.

If any of these crashes, mark the project as


7) Security


The subject insisted on that point: the website must be secured.
Check at least the following points:

- Password are encripted in the database.
- Forms and uploads have correct validations.
- SQL injection isn't possible.

If at least one fails, the defense stops.


8) User connexion


The user must then be able to connect with his username and
password. He must be able to receive an email allowing him to
re-initialize his password should the first one be forgotten.

To disconnect must be possible from any page on the site with
one click.


9) Extended profile

The user must fill in the following:
  - His sex 
  - His sexual orientation
  - Short bio
  - Interests list (with hashtags \#bio, \#NoMakeup...)
  - Images, up to 5, including a profile picture

If the seed is correctly implemented, you can make some tags
proposition in any form you want (autocomplete, top-trending)
Once his profile is complete, he can access the website.
These informations can be changed at any time, once connected.

If one of the points fails, this question is false 


10) Consultations


The user must be able to check out the people that looked at his
profile (there mush be an history of visits) as well as the
people that "liked" him.


11) Profile suggestion


The user must be able to easily get a list of suggestions when
connecting that match his profile.

Suggested profiles must be consistant with sexuality. If the
sexual orientation isn’t specified, the user will be
considered bi-sexual.

Check with the student that profile suggestions are weighted on
three criterias:

- Same geographic area as the user.
- With a maximum of common tags.
- With a maximum fame rating.

Ask the student to explain his strategy to display a list of
relevant suggestions.


12) Research


The user must be able to run an advanced research selecting one
or a few criterias such as:

- A age gap.
- A fame rating gap.
- A location.
- One or multiple interests tags.


13) Sort and filters


The suggestion list as well as the resulting list of a search
must be sortable and filterable by:

- Age.
- Location.
- Fame rating.
- Tags.


14) Geolocalisation


The user must be located using GPS positionning, up to his
neighborhood. If the user does not want to be positionned, a way
must found to locate him even without his knowledge.

The user must be able to modify his GPS position in his profile.


15) Fame rating


Each user must have a public fame rating. Ask the student to
explain his stategy regarding the computing of that score, it
must be consistent and a minimum relevant.


16) Notifications


A user must be notified in real time (We'll also tolerate a 10
secondes delay) of the following events:

- The user received a "like".
- The user received a visit.
- The user received a message.
- A "liked" user "liked" back.
- A connected user "unliked" the current user.

A user must be able to see, from any page that a notification
hasn’t been read.


17) Profile of other users


A user must be able to consult the profile of other users, that
must contain all the information available about them, except
for the email address and the password.

The profile must show the fame rating and if the user is
connected and if not see the last connection date and time.


18) Connexion between users


A user can like or unlike the profile of another user. When two
people like each other, we will say that they are connected and
can be able to chat.

A user that doesn't have a profile picture can't like another
user.

The profile of other users must clearly display if they're
connected with the current user or if they like the current
user.


19) Report et bloking


It's possible to report a profile as "fake account" and block a
specific user. A blocked user won’t appear anymore in the
research results (or in suggestions) and won’t generate
additional notifications.


20) Chat


When two users are connected, they must be able to chat in real
time. (We'll tolerate a 10 secondes delay).

The user must be able to see from any page if a new message is
received.



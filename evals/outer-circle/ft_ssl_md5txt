0) Are they a perfectionist?


Did they set up their executable to read commands from the STDIN
and not just args?


1) Does FT_SSL handle commands correctly?


It doesn't have to match OpenSSL perfectly here, but it must
meet a few basic requirements.

Does ft_ssl handle invalid commands correctly? Does it output an
appropriate error message?

Does ft_ssl provide a usage if no arguments are provided OR does
it read the command from standard input?


2) Are they prepared to out-hash the Hash Slinging Slasher?


Did they add bonus hash functions? Can they prove they
accurately hash identical to their counterpart? Are they
considered stronger than MD5?

(If you're unsure what to rate, the SHA family are similar and
around 2 points each, while whirlpool is more oouah and 5 points
;)


3) Did they implement a function dispatcher?


You're going to have to actually look at the code for this one.
How do they determine which command should be run?

Do they set up a function pointer array and have a clever way of
dispatching their commands? Or a hideous if/else monstrosity?

Award no points for this question if it's only if/else
statments.

Award only 4 points if they have to make a change in more than
two places in the code every time they add a new command. Reduce
a point for each place they must make a change.

(Example:: a NUM_COMMANDS macro in includes, an extra if/else,
or adding another line to their setup_commands or equivalent
function)


4) Are they a Memer? Do they look like someone who memes?


This question has no effect on your grade, we're just starting
our own data-mining personality quiz for the Zucc.


5) Can they MD5 a file?


Check that the ft_ssl md5 hashing algorithm implementation is
100% correct. Nothing less than perfect will be accepted.

echo 'is md5("salt") a salted hash? :thonking_face:' > /tmp/file
./ft_ssl md5 /tmp/file md5 /tmp/file openssl md5 /tmp/file

The spacing of the output does not matter as long as it matches
either openssl or the md5 standalone.


6) Can they do it quietly?


The following command should have no output::

diff <(md5 -q /tmp/file) <(./ft_ssl md5 -q /tmp/file)


7) REVERSE REVERSE!


Now you have to test that they implemented the -r flag
correctly!

md5 -r /tmp/file ./ft_ssl md5 -r /tmp/file


8) Print it back now, Y'all!


They had better be able to do this. It's just 1 write() call,
seriously.

echo "Magic mirror on the wall, think I wanna smash them all?" |
md5 -p echo "Speed up now, Gas Pedal??" | ./ft_ssl md5 -p

My mashup skills are nowhere near as good as MD5's.


9) SHA (Some Hipster Algorithm)


Enough playing around with the suits let's do something fresh
and hip, yeah?

echo "Lorem ipsum dolor amet thundercats letterpress cray
portland cornhole coloring book twee prism hexagon mixtape pork
belly hell of four dollar toast disrupt. Hammock PBR&B bicycle
rights selvage street art, lumbersexual gochujang vegan hot
chicken. Meggings drinking vinegar biodiesel poke roof party
tote bag cloud bread ethical. Glossier flannel 8-bit hexagon
selvage adaptogen farm-to-table offal knausgaard pickled." >
some_hipster_ipsum shasum -a 256 some_hipster_ipsum >
some_hipster_ipsum_sum ./ft_ssl sha256 some_hipster_ipsum >
flip_some_hipsum diff some_hipster_ipsum_sum flip_some_hipsum


10) Nigel Thornberry


You better be SMASHING the Sha Hashing flags like our favorite
documentary filmmaker.

You know what flags need to be tested so I'm going to
consolidate all the tests into a single slider and save us both
(mostly me) some time.


